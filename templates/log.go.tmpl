package middleware

import(
	"bytes"
	"embed"
	"fmt"
	log "{{.LoggerPackage}}"
	"{{.ModuleName}}/pkg/utils"
	"io"
	"net/http"
)

type Log struct {
	l *log.Logger
	printBody bool
	Utils *utils.Utils
	WebDir *embed.FS
}

func NewLog(l *log.Logger, printBody bool, utils *utils.Utils, webDir *embed.FS) *Log{
	return &Log{
		l:l,
		printBody: printBody,
		Utils:     utils,
        WebDir:    webDir,
	}
}

func (l *Log) Handler (next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("X-Backend-Server", l.Utils.Hostname())
		entry := fmt.Sprintf("%s %s", r.Method, r.URL.RequestURI())
		if l.printBody {
			b, err := io.ReadAll(r.Body)
			if err != nil {
				http.Error(w, err.Error(), http.StatusInternalServerError)
				return
			}
			requestBodyCloseErr := r.Body.Close()
            if requestBodyCloseErr != nil {
                l.Utils.Log.Errorf("Error closing body in middleware handler")
            }

			r.Body = io.NopCloser(bytes.NewReader(b))

			entry = fmt.Sprintf("%s %s", entry, string(b))
		}

		l.l.Info(entry)

		next.ServeHTTP(w, r)
	})
}